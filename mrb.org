#+TITLE: Emacs configuration
#+DESCRIPTION: An org-babel bases emacs configuration
#+LANGUAGE:  en
* Emacs configuration
This is my emacs configuration file that is loaded with
=org-babel-load-file= in the Emacs init file. The intent is to have as
much of my Emacs configuration in here as possible. The system works
as a literal programming system where with a tangle the elisp code
that actually makes up my configuration is extracted automatically
and loaded.

** Preparing for lift-off
The base of the emacs configuration is in the =~/.emacs.d/= directory,
so add this to my loadpaths firs.t
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/")
#+END_SRC

The first thing I want to take care of is to make customizations
possible and stored in a place to my liking. I want to load this
first so anything in the configuration I define explicitly overrides
it. 
#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/mrb/custom.el")
(load custom-file)
#+END_SRC

Now that we have the locations of the configuration determined, I want
a way to have them forcibly compiled. 
#+BEGIN_SRC emacs-lisp
  (defun mrb/compile-config ()
    (interactive)
    (byte-recompile-directory "~/.emacs.d" 0)
  )
#+END_SRC

#+RESULTS:
: mrb/compile-config

** Packages
Package handling, do this early so emacs knows where to find things.

I want to manage my packages with el-get. This has grown over time,
because el-get has worked well for me so far. I don’t think I have
used the built-in package management of Emacs 24 much.

The *important* bit here is that this section manages *ALL* my packages,
including the ones gotten from apt-get, git and elpa.
The reason for this is that it provides one neat umbrella (in Emacs)
to manage its packages.

We manage everything with =el-get= so we start by loading that

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/el-get/el-get")
  
  (unless  (require 'el-get nil 'noerror)
    (url-retrieve
     "https://github.com/dimitri/el-get.git/raw/master/el-get-install.el"
     (lambda (s)
       (goto-char (point-max))
       (eval-print-last-sexp))))
#+END_SRC

Now, =el-get= is either require’d, and thus available, or loaded by the
el-get installer, in which case it is also available.

The rest is basically a long list of sources for el-get where to get
the packages from and how to install and update them.
When installing a new package, add a recipe in this list, eval it,
and run =el-get-install= with the package name.

#+BEGIN_SRC emacs-lisp
  (setq el-get-sources
        '(
          ;; Obviously we need el-get itself, so we can run a self-update
          ;; There is a recipe, but that is conservative, runs version 3.stable
          (:name el-get
                 :type git
                 :url "git://github.com/dimitri/el-get.git"
                 :features "el-get")
          ;; Using a different source than the built-in recipe (why was this again?)
          (:name zenburn-emacs
                 :type git 
                 :url "https://github.com/bbatsov/zenburn-emacs.git")
          ;; Version from elpa does not work for me (init problem?)
          smex
          ace-jump-mode
          apache-mode
          (:name cursor-chg
                 :type git
                 :url  "https://github.com/emacsmirror/cursor-chg.git"
                 :features cursor-chg)
          gnuplot-mode
          sudo-save
          erc-highlight-nicknames
          edit-server
          magit
          markdown-mode
          (:name php-mode-improved)         ; Just to have example for other syntax
          (:name newlua-mode
                 :type git 
                 :url "git://github.com/immerrr/lua-mode.git"
                 :features lua-mode)
          rainbow-delimiters
          (:name typopunct
                 :type git
                 :url "https://github.com/emacsmirror/typopunct.git"
                 :features typopunct)
          (:name oauth
                 :type git
                 :url "https://github.com/psanford/emacs-oauth.git")
          scratch
          highlight-parentheses
          (:name sauron
                 :type git
                 :url "https://github.com/djcb/sauron.git")
  
          (:name calfw
                 :type git
                 :url "https://github.com/kiwanami/emacs-calfw.git")
  
          (:name expand-region 
                 :type git 
                 :url "https://github.com/magnars/expand-region.el.git")
  
          (:name mark-multiple 
                 :type git 
                 :url "https://github.com/magnars/mark-multiple.el.git")
  
          (:name multiple-cursors 
                 :type git 
                 :url "https://github.com/magnars/multiple-cursors.el.git")
  
          (:name fixed-point-completion
                 :type git
                 :url "https://github.com/smithzvk/fixed-point-completion.git")
  
          (:name xlicense
                 :type git
                 :url "https://github.com/emacsmirror/xlicense.git")
          (:name autosmiley
                 :type git
                 :url "https://github.com/emacsmirror/autosmiley.git")
          (:name async
                 :type git
                 :url "https://github.com/jwiegley/emacs-async.git")
          (:name pcache
                 :type git 
                 :url "https://github.com/sigma/pcache.git")
          (:name logito
                 :type git 
                 :url "https://github.com/sigma/logito.git")
          (:name gh
                 :type git 
                 :url "https://github.com/sigma/gh.el.git"
                 :depends (pcache logito))
          (:name gisthub
                 :type git 
                 :url  "https://github.com/defunkt/gist.el.git"
                 :depends (gh))
          (:name stripe-buffer
                 :type git
                 :url "https://github.com/sabof/stripe-buffer.git")
          (:name keyfreq
                 :type git
                 :url "https://github.com/dacap/keyfreq.git")
        )
  )
  (el-get)
#+END_SRC
** Subfiles
Most of the Emacs configuration is stil configured using a set of
elisp files in subdirectories. I envision these becoming sections in
this configuration document, but for now I just load them inline

*** Global
Generic settings
#+BEGIN_SRC emacs-lisp
  ;;
  ;; Global settings
  ;;
  ;; disable auto-save files (#foo#)
  (setq 
   auto-save-default nil
   
   ; disable backup files (foo~)
   backup-inhibited t
   
   ; disable auto-save-list/.saves
   auto-save-list-file-prefix nil
  
   ; move files to the trash instead of rm
   delete-by-moving-to-trash t
   
   ; use clipboard
   x-select-enable-clipboard t
  
   display-warning-minimum-level 'error
   large-file-warning-threshold nil
   tab-width 4
   find-file-use-truenames nil
   find-file-compare-truenames t
  
   minibuffer-max-depth nil
   minibuffer-confirm-incomplete t
   complex-buffers-menu-p t
   next-line-add-newlines nil
   kill-whole-line t
   truncate-lines t
  )
  
  
  (global-visual-line-mode 1)
  
  ;; Only require to type 'y' or 'n' instead of 'yes' or 'no' when prompted
  (fset 'yes-or-no-p 'y-or-n-p)
  
  ; Use auto revert mode globally 
  ; This is save because emacs tracks if the file is saved in the editting buffer
  ; and if so, it will not revert to the saved file.
  (global-auto-revert-mode t)
  
  ;; Turn on auto-fill minor mode for all text buffers
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  
  
  ;; Should this be here?
  ;; Try to have urls and mailto links clickable everywhere
  (define-global-minor-mode global-goto-address-mode
    goto-address-mode
    (lambda ()
      (goto-address-mode 1)))
  (global-goto-address-mode t)  
#+END_SRC
*** Terminal
Character encoding, commandline and emulation
#+BEGIN_SRC emacs-lisp
  ;; Full utf-8 support
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (setq current-language-environment "UTF-8")
  
  (defun mrb/use-utf8 ()
    (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix))
  (add-hook 'term-exec-hook 'mrb/use-utf8)
  
  ;; Define terminal config, I prefer ansi-term
  (require 'term)
  (defun mrb/ansi-term (&optional new-buffer-name)
    "Start a terminal-emulator in a new buffer."
    (interactive) 
  
    (setq program "/bin/bash")
  
    ;; Pick the name of the new buffer.
    (setq term-ansi-buffer-name
          (if new-buffer-name
              new-buffer-name
            (if term-ansi-buffer-base-name
                (if (eq term-ansi-buffer-base-name t)
                    (file-name-nondirectory program)
                  term-ansi-buffer-base-name)
              "ansi-term")))
  
    (setq term-ansi-buffer-name (concat "*" term-ansi-buffer-name "*"))
  
    ;; In order to have more than one term active at a time
    ;; I'd like to have the term names have the *term-ansi-term<?>* form,
    ;; for now they have the *term-ansi-term*<?> form but we'll see...
  
    (setq term-ansi-buffer-name (generate-new-buffer-name term-ansi-buffer-name))
    (setq term-ansi-buffer-name (term-ansi-make-term term-ansi-buffer-name program))
  
    (set-buffer term-ansi-buffer-name)
    (term-mode)
    (term-char-mode)
  
    ;; I wanna have find-file on C-x C-f -mm
    ;; your mileage may definitely vary, maybe it's better to put this in your
    ;; .emacs ...
  
    (term-set-escape-char ?\C-x)
  
    ;; Go there
    (switch-to-buffer term-ansi-buffer-name))
  
  ; Aliases
  (defalias 'at 'mrb/ansi-term)
  
  ;; When closing the ansi term window, close the useless buffer too
  (defadvice term-sentinel (around mrb/advice-term-sentinel (proc msg))
    (if (memq (process-status proc) '(signal exit))
        (let ((buffer (process-buffer proc)))
          ad-do-it
          (kill-buffer buffer))
      ad-do-it))
  (ad-activate 'term-sentinel)
  
  
  
  (provide 'terminal)
  
#+END_SRC handling.
*** Visual
Make things look the way I want them
#+BEGIN_SRC emacs-lisp
(load "mrb/visual") 
#+END_SRC
*** Binding
Keyboard mappings
#+BEGIN_SRC emacs-lisp
(load "mrb/bindings")
#+END_SRC
*** Buffers
How do I deal with all those buffers
#+BEGIN_SRC emacs-lisp
(load "mrb/buffers")
#+END_SRC
*** Modes
Settings about different modes in general. Not specific settings to
one mode in particular.
#+BEGIN_SRC emacs-lisp
(load "mrb/modes")     
#+END_SRC 
*** Org-mode
Orgmode configuraton
#+BEGIN_SRC emacs-lisp
(load "mrb/org-mode")
#+END_SRC
*** Statusnet
Statusnet, or perhaps microblog in general settings
#+BEGIN_SRC emacs-lisp
(load "mrb/statusnet")             ; Statusnet configuration
#+END_SRC
*** Google-map
Google map integration for Emacs
#+BEGIN_SRC emacs-lisp
(load "mrb/google-map")
#+END_SRC
*** XMPP
XMPP related settings, including interfacing it to other systems
#+BEGIN_SRC emacs-lisp
(load "mrb/xmpp")
#+END_SRC
*** Mail
Mail configuration. 
#+BEGIN_SRC emacs-lisp
(load "mrb/mail")
#+END_SRC
*** OpenSCAD
OpenSCAP mode, it’s a mode that describes 3D-models
#+BEGIN_SRC emacs-lisp
(load "mrb/openscad")
#+END_SRC
*** LDAP
LDAP integration, mostly for address book lookups
#+BEGIN_SRC emacs-lisp
(load "mrb/ldap")                  ; LDAP integration
#+END_SRC
*** E-She-ll
A terminal in Emacs, I would like to migrate to it for all terminal
based activities, but it’s not there yet.
#+BEGIN_SRC emacs-lisp
(load "mrb/eshell")
#+END_SRC
#+END_SRC
** Visual 
Many settings have to do with how the screen looks and behaves in a
visual way. Thing like colors, highlighting etc. go fall into this
category.

I enable hightlighting matching parentheses in many levels
globally. I do not know of a situation where not knowing which
bracket or parenthesis goes with which is not a useful thing.

Define the colors for the parentheses at different levels. One catch
here is that the configuration needs one more color than is actually
used. The last entry here does not get highlighted, so my config is
valid for 5 levels, not 6.
#+BEGIN_SRC emacs-lisp
(setq hl-paren-colors (quote ("firebrick" "lightgreen" "orange" "cyan" "yellow" "blue")))
#+END_SRC

And enable the minor mode globally.
#+BEGIN_SRC emacs-lisp
(define-globalized-minor-mode global-highlight-parentheses-mode
  highlight-parentheses-mode
  (lambda ()
    (highlight-parentheses-mode t)))
(global-highlight-parentheses-mode t)
#+END_SRC

** Editing control

I like to do thing interactively where I can:
#+BEGIN_SRC emacs-lisp
(require 'ido)
(ido-mode t)
(setq ido-enable-flex-matching t) ;; enable fuzzy matching
(ido-everywhere)
#+END_SRC

Be smart with tabs and try to have the tab key do the sensible
thing. The list contains things the tab key should do in certain
modes if it does not already. The second part is the exclusion list
where the sensible thing the =smart-tab= mode provides is not sensible
at all.
#+BEGIN_SRC emacs-lisp
;; Do smart tabbing, this does mostly the right thing everywhere
(require 'smart-tab)
;; Make sure it does the right thing in some modes, notably erc
(setq smart-tab-completion-functions-alist
      (quote (
	      (emacs-lisp-mode . lisp-complete-symbol)
	      (text-mode . dabbrev-completion)n
	      (erc-mode . pcomplete)))
      smart-tab-disabled-major-modes
      (quote (org-mode org-agenda-mode term-mode)))

;; Enable everywhere
(global-smart-tab-mode 1)
#+END_SRC

By selecting a piece of text, wrap-region can quote or otherwise
delimit that region automatically. I enable this globally. There is
an option to configure in exception, which I have commented out as
I've found none applicable yet.
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/dev/emacs/packages/wrap-region")
(require 'wrap-region)
(wrap-region-global-mode 1)
;; (add-to-list 'wrap-region-except-modes 'conflicting-mode)
#+END_SRC
** Key bindings
*** Global
I am running the emacs daemon and when I quit it, I want it to quit
too. This sounds a bit counterintuitive, but as long as my emacs
config is moving and I am not proficient enough in making sure I can
apply the changed settings reliably from within emacsm, restarting
emacs is just easier. This saves me from having to kill the emacs
daemon from the terminal.

#+BEGIN_SRC emacs-lisp
(global-set-key [(control x) (control q)] 'save-buffers-kill-emacs)
#+END_SRC

** Remote editing
#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "ssh")
#+END_SRC

** Browser integration
My default browser, as set in the OS, is chromium. Yet, emacs needs
an explicit mention, otherwise it will start firefox. Not sure why
that is.
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function (quote browse-url-generic))
(setq browse-url-generic-program "chromium-browser")
#+END_SRC

** Messaging and chatting
*** ERC
ERC is an irc implementation within emacs.
#+BEGIN_SRC emacs-lisp
(require 'erc-services)
(and
     (require 'erc-highlight-nicknames)
     (add-to-list 'erc-modules 'highlight-nicknames)
     (erc-update-modules))
(setq
  erc-prompt-for-nickserv-password nil
  erc-hide-list '("JOIN" "PART" "QUIT")
  erc-nick '("Marcel|HSD" "Marcel||HSD")
  erc-nickserv-passwords '((freenode (("Marcel|HSD" . "PASSWORDHERE"))))
)
#+END_SRC
** Quantified Emacs!
Taken from sacha’s configuration, this records which keys I press in
emacs and how often I do that. This is usefull, or may be, for
decisions with respect to keyboard choices, bindings configuration
etc.
#+begin_src emacs-lisp
  (require 'keyfreq)
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1)
#+end_src

** To organize and properly configura
Multiple cursors sounds interesting

#+BEGIN_SRC emacs-lisp
(require 'multiple-cursors)
#+END_SRC

License templates
#+BEGIN_SRC emacs-lisp
(require 'xlicense)
(setq license-directory "~/.emacs.d/licenses")
(add-to-list 'license-types '(agpl . "AGPL"))
#+END_SRC

Make sure erase works properly, even though I don't understand this,
apparently this is what I need.
#+BEGIN_SRC emacs-lisp
(if window-system  (normal-erase-is-backspace-mode t))
#+END_SRC
* Self configuration                                                                                 :exclude:
I have the same config file for orgmode itself
#+SETUPFILE: ~/.outlet/etc/org-config.org
  
If there is anything that needs to be configured specifically for this
file, here is the place to do it. Other than those, nothing else
should come below this point
