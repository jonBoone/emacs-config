#+TITLE: Emacs configuration
* Emacs configuration
This is my emacs configuration file that is loaded with
=org-babel-load-file= in the Emacs init file. The intent is to have as
much of my Emacs configuration in here as possible. The system works
as a literal programming system where with a tangle the elisp code
that actually makes up my configuration is extracted automatically
and loaded.

The base of the emacs configuration is in the =~/.emacs.d/= directory,
so add this to my loadpaths firs.t
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/")
#+END_SRC

** Customization file
The first thing I want to take care of is to make customizations
possible and stored in a place to my liking. I want to load this
first so anything in the configuration I define explicitly overrides
it. 
#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/mrb/custom.el")
(load custom-file)
#+END_SRC
** Packages
Most of the Emacs configuration is stil configured using a set of
elisp files in subdirectories. I envision these becoming sections in
this configuration document, but for now I just load them
#+BEGIN_SRC emacs-lisp
;; Load all my configuration files
(load "mrb/packages")              ; Package handling, do this first, so we know how to load things
(load "mrb/global")                ; Generic settings
(load "mrb/terminal")              ; character/encoding/commandline and emulation handling.
(load "mrb/visual")                ; Make things look the way I want them 
(load "mrb/bindings")              ; Keyboard control
(load "mrb/buffers")               ; Buffer configuration
(load "mrb/modes")                 ; Setting about modes in general, not specific to one mode 
(load "mrb/org-mode")              ; Orgmode configuration
(load "mrb/statusnet")             ; Statusnet configuration
(load "mrb/google-map")            ; Google map integration for Emacs
(load "mrb/xmpp")                  ; XMPP configuration
(load "mrb/mail")                  ; Mail confguration
(load "mrb/openscad")              ; OpenSCAD mode
(load "mrb/ldap")                  ; LDAP integration
(load "mrb/eshell")                ; Eshell configuration
#+END_SRC
** Visual 
Many settings have to do with how the screen looks and behaves in a
visual way. Thing like colors, highlighting etc. go fall into this
category.

I enable hightlighting matching parentheses in many levels
globally. I do not know of a situation where not knowing which
bracket or parenthesis goes with which is not a useful thing.

Define the colors for the parentheses at different levels. One catch
here is that the configuration needs one more color than is actually
used. The last entry here does not get highlighted, so my config is
valid for 5 levels, not 6.
#+BEGIN_SRC emacs-lisp
(setq hl-paren-colors (quote ("firebrick" "lightgreen" "orange" "cyan" "yellow" "blue")))
#+END_SRC

And enable the minor mode globally.
#+BEGIN_SRC emacs-lisp
(define-globalized-minor-mode global-highlight-parentheses-mode
  highlight-parentheses-mode
  (lambda ()
    (highlight-parentheses-mode t)))
(global-highlight-parentheses-mode t)
#+END_SRC

** Editing control

I like to do thing interactively where I can:
#+BEGIN_SRC emacs-lisp
(require 'ido)
(ido-mode t)
(setq ido-enable-flex-matching t) ;; enable fuzzy matching
(ido-everywhere)
#+END_SRC

Be smart with tabs and try to have the tab key do the sensible
thing. The list contains things the tab key should do in certain
modes if it does not already. The second part is the exclusion list
where the sensible thing the =smart-tab= mode provides is not sensible
at all.
#+BEGIN_SRC emacs-lisp
;; Do smart tabbing, this does mostly the right thing everywhere
(require 'smart-tab)
;; Make sure it does the right thing in some modes, notably erc
(setq smart-tab-completion-functions-alist
      (quote (
	      (emacs-lisp-mode . lisp-complete-symbol)
	      (text-mode . dabbrev-completion)n
	      (erc-mode . pcomplete)))
      smart-tab-disabled-major-modes
      (quote (org-mode org-agenda-mode term-mode)))

;; Enable everywhere
(global-smart-tab-mode 1)
#+END_SRC

By selecting a piece of text, wrap-region can quote or otherwise
delimit that region automatically. I enable this globally. There is
an option to configure in exception, which I have commented out as
I've found none applicable yet.
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/dev/emacs/packages/wrap-region")
(require 'wrap-region)
(wrap-region-global-mode 1)
;; (add-to-list 'wrap-region-except-modes 'conflicting-mode)
#+END_SRC
** Key bindings
*** Global
I am running the emacs daemon and when I quit it, I want it to quit
too. This sounds a bit counterintuitive, but as long as my emacs
config is moving and I am not proficient enough in making sure I can
apply the changed settings reliably from within emacsm, restarting
emacs is just easier. This saves me from having to kill the emacs
daemon from the terminal.

#+BEGIN_SRC emacs-lisp
(global-set-key [(control x) (control q)] 'save-buffers-kill-emacs)
#+END_SRC

** Remote editing
#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "ssh")
#+END_SRC

** Browser integration
My default browser, as set in the OS, is chromium. Yet, emacs needs
an explicit mention, otherwise it will start firefox. Not sure why
that is.
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function (quote browse-url-generic))
(setq browse-url-generic-program "chromium-browser")
#+END_SRC

** Messaging and chatting
*** ERC
ERC is an irc implementation within emacs.
#+BEGIN_SRC emacs-lisp
(require 'erc-services)
(and
     (require 'erc-highlight-nicknames)
     (add-to-list 'erc-modules 'highlight-nicknames)
     (erc-update-modules))
(setq
  erc-prompt-for-nickserv-password nil
  erc-hide-list '("JOIN" "PART" "QUIT")
  erc-nick '("Marcel|HSD" "Marcel||HSD")
  erc-nickserv-passwords '((freenode (("Marcel|HSD" . "PASSWORDHERE"))))
)
#+END_SRC
** Quantified Emacs!
Taken from sachaâ€™s configuration, this records which keys I press in
emacs and how often I do that. This is usefull, or may be, for
decisions with respect to keyboard choices, bindings configuration
etc.
#+begin_src emacs-lisp
  (require 'keyfreq)
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1)
#+end_src

** To organize and properly configura
Multiple cursors sounds interesting

#+BEGIN_SRC emacs-lisp
(require 'multiple-cursors)
#+END_SRC

License templates
#+BEGIN_SRC emacs-lisp
(require 'xlicense)
(setq license-directory "~/.emacs.d/licenses")
(add-to-list 'license-types '(agpl . "AGPL"))
#+END_SRC

* Self configuration
I have the same config file for orgmode itself
#+SETUPFILE: ~/.outlet/etc/org-config.org
  
If there is anything that needs to be configured specifically for this
file, here is the place to do it. Other than those, nothing else
should come below this point
